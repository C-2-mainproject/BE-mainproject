#spring:
#  profiles:
#    active:
#      - dev

server:
  port: 8080

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 579246999082-g4817qa0svom0jsk9b47p16j4pibsgom.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
            redirect-uri: http://localhost:8080/login/oauth2/code/google
          naver:
            client-id: FNuHkkM6wMXwxnsr3PPb
            client-secret: _34iq7OQiW
            scope:
              - email
              - public_profile
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
        provider: # provider 가 등록이 되어있지 않기 때문에 이렇게 따로 설정해주어야함
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # 인증창 접근
            token-uri: https://nid.naver.com/oauth2.0/token # 토큰 발급
            user-info-uri: https://openapi.naver.com/v1/nid/me # 프로필 정보 조회
            user-name-attribute: response # 회원정보를 json 으로 받는데 response 라는 키 값으로 네이버가 리턴
  session:
    store-type: redis
  redis:
    host: 127.0.0.1
    password:
    port: 6379
  servlet: #  max file size
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  mvc:
    path match:
      matching-strategy: ant_path_matcher # Spring boot 2.6 이후부터  spring.mvc.pathmatch.matching-strategy 값이 ant_path_matcher에서 path_pattern_parser로 변경
  main:
    allow-circular-references: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/mainproject?serverTimezone=Asia/Seoul
    username: root
    password: qjqtk12!



  jpa:
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false
    show-sql: true
    generate-ddl: true
    properties:
      hibernate:
        default_batch_fetch_size: 1000

  output:
    ansi:
      enabled: always



logging:
  level:
    '[org.apache.coyote.http11]': DEBUG
    '[org.springframework.web]': DEBUG
    '[org.hibernate]': DEBUG

# AWS S3 Bucket Access Key (IAM csv)
cloud:
  aws:
    credentials:
      access-key: ${{ secrets.AWS_S3_ACCESS_KEY }}
      secret-key: ${{ secrets.AWS_S3_SECRET_KEY }}
    s3:
      bucket: dong-example
    region:
      static: ap-northeast-2
    stack:
      auto: false